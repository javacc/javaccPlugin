plugins {
    id 'javaccPlugin.plugin-conventions'

    id 'checkstyle'
    id 'com.github.spotbugs' version '6.1.3'
    id 'jacoco'
}

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort

defaultTasks 'clean', 'build', 'install'


sourceSets {
    acceptanceTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

test {
    jvmArgs = ["--add-opens=java.base/java.io=ALL-UNNAMED"]
}

configurations {
    acceptanceTestImplementation.extendsFrom testImplementation
}

dependencies {
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-all:1.10.19'

    compileOnly        'net.java.dev.javacc:javacc:7.0.13'
    testImplementation 'net.java.dev.javacc:javacc:7.0.13'
}

eclipse {
    project {
        name = 'javacc-gradle-plugin'
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': archiveVersion
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/config/checkstyle/checks.xml")
}
tasks.withType(Checkstyle) {
    reports {
        xml.required = true
    }
}
spotbugs {
    toolVersion = '4.8.6'
    effort = Effort.MAX
    maxHeapSize = project.hasProperty('spotBugsHeapSize') ? project.spotBugsHeapSize : '1g'
    ignoreFailures = false
    reportLevel = Confidence.values()[3]
    excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.register('acceptanceTest', Test) {
    mustRunAfter test

    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

tasks.named('check') {
    dependsOn acceptanceTest
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.acceptanceTest.output
}

artifacts {
    archives testJar
}

gradlePlugin {
    testSourceSets sourceSets.acceptanceTest
    plugins {
        javaccPlugin {
            id = 'org.javacc.javacc'
            implementationClass = 'org.javacc.plugin.gradle.javacc.JavaccPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/javacc/javaccPlugin'
    vcsUrl = 'https://github.com/javacc/javaccPlugin'
    description = 'A JavaCC plugin for Gradle'
    tags = ['javacc']

    plugins {
        javaccPlugin {
            id = 'org.javacc.javacc'
            displayName = 'JavaCC Plugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom.withXml {
                asNode().appendNode('name', project.getName())
                asNode().appendNode('description', 'Provides the ability to use JavaCC with Gradle. Compiles JavaCC files to Java.')
                asNode().appendNode('url', 'https://github.com/javacc/javaccPlugin')

                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The MIT License (MIT)')
                license.appendNode('url', 'http://opensource.org/licenses/MIT')
                license.appendNode('distribution', 'repo')

                def scm = asNode().appendNode('scm')
                scm.appendNode('url', 'https://github.com/javacc/javaccPlugin')
                scm.appendNode('connection', 'scm:https://github.com/javacc/javaccPlugin.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/javacc/javaccPlugin.git')

                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'jmartel')
                developer.appendNode('name', 'Jonathan Martel')
                developer.appendNode('email', 'jonathan.martel@coglinc.ca')
            }
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            it.find({ it.artifactId == 'org.javacc.javacc.gradle.plugin'}).pom.scm {
               url  = 'https://github.com/javacc/javaccPlugin'
               connection = 'scm:https://github.com/javacc/javaccPlugin.git'
               developerConnection = 'scm:git://github.com/javacc/javaccPlugin.git'
            }
        }
    }
}
